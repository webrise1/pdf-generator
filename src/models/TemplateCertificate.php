<?php
namespace webrise1\pdfgenerator\models;

use webrise1\filemanager\models\File;
use Yii;
use kartik\mpdf\Pdf;

class TemplateCertificate extends \yii\db\ActiveRecord{
const STATUS_ACTIVE=1;
const STATUS_INACTIVE=2;
const STATUS_ARCHIVE=3;


    public static function tableName()
    {
        return '{{%pdf_generator_template_certificate}}';
    }

    public static function getStatusesLabels(){
        return [
            self::STATUS_ACTIVE=>'Активный',
            self::STATUS_INACTIVE=>'Неактивный',
            self::STATUS_ARCHIVE=>'Архив',
        ];
    }
    public function rules()
    {
        return [
            [['name'], 'filter', 'filter' => 'trim'],
            [['name'], 'required'],
            [['name','title'], 'string', 'max' => 255],
            [['content','cssInline'], 'string'],
            [['status','css_files','width','height'], 'safe'],
        ];
    }
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название шаблона сертификата',
            'status' => 'Статус шаблона сертификата',
            'title' => 'Заголовок(pdf)',
            'cssInline' => 'Стили css(pdf)',
            'content' => 'Html код(pdf)',
            'width' => 'Ширина',
            'height' => 'Высота',
        ];
    }
    public function getGeneratedPdf($user_id){
        Yii::$app->response->format = \yii\web\Response::FORMAT_RAW;
        $this->InsertValuesInContent($user_id);
        $css_files_content='';

        foreach(explode(',',$this->css_files) as $file_id){
            $file_id=File::getIdFromSnippet($file_id);
            $file=File::findOne($file_id);
            if($file){
                $file_content=file_get_contents($file->path);
                if($file_content)
                    $css_files_content.=$file_content;
            }
        }
        $this->content=File::convertFileSnippets($this->content);
        $this->cssInline=$css_files_content.$this->cssInline;


        $pdf = new Pdf([
            'mode' => '',
            'format'=>($this->width && $this->height)?[$this->width,$this->height]:'',
            'destination' => Pdf::DEST_BROWSER,
            'content' =>  ($this->content)?$this->content:'',
            'cssInline' => $this->cssInline,
            'methods' => [
                'SetTitle' => $this->title,
            ]
        ]);
        return $pdf->render();
    }
    public function InsertValuesInContent($user_id){
        $content=$this->content;
        foreach(Yii::$app->controller->module->includeModels as $key=>$includeModel){
            if(!$includeModel['user_id'])
                break;
            $findModel=$includeModel['model']::findOne([$includeModel['user_id']=>$user_id]);
            preg_match_all("/\[\[".$key.'\.'."[a-z._]+\]\]/", $content,  $matches);
            if($matches)
                foreach($matches[0] as $match){
                $explode_match=explode('.',str_replace(['[',']'],'',$match));
                unset($explode_match[0]);
                $value=$findModel;
                foreach($explode_match as $exp_match){
                    $value=$value->$exp_match;
                }
                $content=str_replace($match,$value,$content);
                }
        }
        $this->content=$content;
    }
    public function beforeSave($insert)
    {
         if(!$this->isNewRecord){
             if($this->oldAttributes['status']==self::STATUS_ARCHIVE){
                 $this->status=self::STATUS_ARCHIVE;
             }
         }
        if(!$this->width || !$this->height){
            $this->width=null;
            $this->height=null;
        }
            $snippets_files=[];
            foreach($this->css_files as $file_id){
                $file=new File();
                $file->id=$file_id;
                $snippets_files[]=$file->getSnippet();
            }
            $this->css_files=implode(',',$snippets_files);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}